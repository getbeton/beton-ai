generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Integration {
  id              String          @id @default(cuid())
  userId          String
  serviceName     String
  name            String
  isActive        Boolean         @default(true)
  lastHealthCheck DateTime?
  healthStatus    String          @default("unknown")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  keySource       String          @default("personal")
  platformKeyId   String?
  apiKeys         ApiKey[]
  platformKey     PlatformApiKey? @relation(fields: [platformKeyId], references: [id])

  @@unique([userId, serviceName, name])
  @@map("integrations")
}

model ApiKey {
  id            String      @id @default(cuid())
  integrationId String
  apiKey        String
  keyType       String
  isActive      Boolean     @default(true)
  lastUsed      DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@unique([integrationId, keyType])
  @@map("api_keys")
}

model PlatformApiKey {
  id           String        @id @default(cuid())
  serviceName  String        @unique
  apiKey       String
  isActive     Boolean       @default(true)
  description  String?
  rateLimit    Int?
  usageCount   Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  integrations Integration[]

  @@map("platform_api_keys")
}

model UserPreferences {
  id        String   @id @default(cuid())
  userId    String   @unique
  theme     String   @default("light")
  language  String   @default("en")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_preferences")
}

model UserTable {
  id              String            @id @default(cuid())
  userId          String
  name            String
  description     String?
  sourceType      String            @default("manual")
  sourceId        String?
  isArchived      Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  isProcessing    Boolean           @default(false)
  processingJobId String?
  bulkJobs        BulkDownloadJob[]
  columns         TableColumn[]
  rows            TableRow[]

  @@unique([userId, name])
  @@map("user_tables")
}

model TableColumn {
  id           String      @id @default(cuid())
  tableId      String
  name         String
  type         String
  isRequired   Boolean     @default(false)
  isEditable   Boolean     @default(true)
  defaultValue String?
  order        Int
  settings     Json        @default("{}")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  cells        TableCell[]
  table        UserTable   @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@unique([tableId, name])
  @@map("table_columns")
}

model TableRow {
  id          String      @id @default(cuid())
  tableId     String
  sourceRowId String?
  isSelected  Boolean     @default(false)
  order       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cells       TableCell[]
  table       UserTable   @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@map("table_rows")
}

model TableCell {
  id        String      @id @default(cuid())
  rowId     String
  columnId  String
  value     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  column    TableColumn @relation(fields: [columnId], references: [id], onDelete: Cascade)
  row       TableRow    @relation(fields: [rowId], references: [id], onDelete: Cascade)

  @@unique([rowId, columnId])
  @@map("table_cells")
}

model BulkDownloadJob {
  id              String                 @id @default(cuid())
  userId          String
  tableId         String
  jobType         String                 @default("apollo_people_search")
  status          String                 @default("pending")
  searchQuery     Json
  totalEstimated  Int?
  totalProcessed  Int                    @default(0)
  currentPage     Int                    @default(1)
  totalPages      Int?
  failureCount    Int                    @default(0)
  lastError       String?
  maxRetries      Int                    @default(3)
  bullJobId       String?
  startedAt       DateTime?
  completedAt     DateTime?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  table           UserTable              @relation(fields: [tableId], references: [id])
  progressEntries BulkDownloadProgress[]

  @@map("bulk_download_jobs")
}

model BulkDownloadProgress {
  id          String          @id @default(cuid())
  jobId       String
  page        Int
  recordCount Int
  status      String
  error       String?
  processedAt DateTime        @default(now())
  job         BulkDownloadJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([jobId, page])
  @@map("bulk_download_progress")
}
